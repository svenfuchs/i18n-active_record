*NOTE* This is my fork of svenfuchs/i18n-active_record (https://github.com/svenfuchs/i18n-active_record) which seemed abandoned at the time I created this fork, with issues and pull request not being addressed for months/years.
I have been sending pull requests with the fixes I have done, but untill they are merged, I keep my updated branch at 'latest_stable' and my forked gem can be found in RubyGems.org https://rubygems.org/gems/chipairon-i18n-active_record

To reference it in your Gemfile:

<pre>
  gem 'chipairon-i18n-active_record'
</pre>

I am using this gem as a component for an engine with web administration for translations: i18nline (https://github.com/elpulgardelpanda/i18nline-rails)


h1. I18n::Backend::ActiveRecord

This repository contains the I18n ActiveRecord backend and support code that has been extracted from the "I18n":http://github.com/svenfuchs/i18n.

h2. Installation

For Bundler put the following in your Gemfile:

<pre>
  gem 'i18n-active_record',
      :git => 'git://github.com/svenfuchs/i18n-active_record.git',
      :require => 'i18n/active_record'
</pre>

Next create a active record model named @Translation@ with the Rails Generator.
Your migration should look like this:

<pre>
  class CreateTranslations < ActiveRecord::Migration
    def self.up
      create_table :translations do |t|
        t.string :locale
        t.string :key
        t.text   :value
        t.text   :interpolations
        t.boolean :is_proc, :default => false

        t.timestamps
      end
    end

    def self.down
      drop_table :translations
    end
  end
</pre>

With this translation model you will be able to manage your translation, and add new translations or languages through
it.

To load @I18n::Backend::ActiveRecord@ into your Rails application, create a new file in *config/initializers* named *locale.rb*.

A simple configuration for your locale.rb could look like this:

<pre>
  require 'i18n/backend/active_record'
  I18n.backend = I18n::Backend::ActiveRecord.new
</pre>

A more adavanced example (Thanks Moritz), which uses YAML files and ActiveRecord for lookups:

<pre>
  require 'i18n/backend/active_record'
  
  Translation  = I18n::Backend::ActiveRecord::Translation
  
  if Translation.table_exists?
    I18n.backend = I18n::Backend::ActiveRecord.new

    I18n::Backend::ActiveRecord.send(:include, I18n::Backend::Memoize)
    I18n::Backend::ActiveRecord.send(:include, I18n::Backend::Flatten)
    I18n::Backend::Simple.send(:include, I18n::Backend::Memoize)
    I18n::Backend::Simple.send(:include, I18n::Backend::Pluralization)

    I18n.backend = I18n::Backend::Chain.new(I18n::Backend::Simple.new, I18n.backend)
  end
</pre>

h2. Usage

You can now use @I18n.t('Your String')@ to lookup translations in the database.

h2. Maintainers

* Sven Fuchs


